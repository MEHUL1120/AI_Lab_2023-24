# Ex.No: 13 Learning miniproject.  
### DATE: 22/04/2024                                                                           
### REGISTER NUMBER : 212221060166
### AIM:
Write a program to build a computer maintenance expert system.
To write a program to train the classifier for -----------------.
###  Algorithm:
Start the program
Import requred Python libraries, including NumPy, Pandas, Google Colab, Gradio, and various scikit-learn modules.
Mount Google Drive using Google Colab's 'drive mount()' method to access the data file located in Google Drive.
Install the Gradio library using 'pip install gradio.
Load the diabetes dataset from a CSV file ('diabetes.csv') using Pandas.
Separate the target variable (Outcome') from the input features and Scale the input features using the Standard Scaler from scikit-learn.
Create a multi-layer perceptron (MLP) classifier model using scikit-learn's 'MLPClassifier
Train the model using the training data (x_train and y_train)
Define a function named 'diabetes' that takes input parameters for various features and Use The trained machine learning model to predict the outcome based on the input features
Create a Gradio interface using 'gr.Interface and Specify the function to be used to make predictions based on user inputs.
Launch the Gradio web application, enabling sharing, to allow users to input their data and get predictions regarding diabetes risk.
Stop the program.

### Program:
#import packages
Import numpy as np
Import pandas as pd from google.colab import drive drive,mount('/content/gdrive')
pip install gradio
pip install typing-extensions --upgrade import gradic as gr
ed/content/gdrive/MyDrive/demo/gradio_pro
#get the data
data pd.read csv('diabetes.cav')
data.head()
print(data.columns)
*data.drop((Outcome'l. sxia-1)
y data l'Outcome')
print (x/:5])
from multi incalance.utils.plot import plot cardinality_and_20_data
plot cardinality and 2d data(, y. PIMA Diabetes Prediction Data set
Asplit data
from sklearn.model selection import train test split
train, test, y train, y teat train_test_split(x,y)
Facale da
from sklearn.preprocessing import standardicaler
scaler Standardscaler()
x train scaled scaler.fit transformix traini x_test scaled scaler.fit transformix_test)
#instatiate model
from sklearn.neural network import HLPCiansifior model NLPClassifier(max iter-1000, alpha-1)
model, fitin train, y trainÿß
print("Model Accuracy on training seti", model.scoreix train, y traini)
print("Model Accuracy on Test det", nodel.scoreix test, ytentil
print(data.columns)
#create a function for gradio
del diabetes (Pregnancies, Glucose, Blood Pressure, SkinThickness, Insul np.array (Pregnancies, Glucase, Blood Pressure, Skinthickness, Ins
prediction model predictis.reshape(3, -111
if (prediction 01:
raturn "NO"
zetoan "VE
#cenate
function for gradio
def diabetes(Pregnancies, Glucose, Blood Pressure, SkinThickness, Ins np.array([Pregnancies.Glucose,Blood Pressure, AkinThickness, prediction model predictik.reshape 13.311
outputs gr.Textbox
return prediction
gr.Interface (frwdiabetes, inputs'mber','number, number', 'number, as app. launch tahare True)

### Output:
blob:https://web.whatsapp.com/807fbf79-96ec-4d0a-b713-e6f2b5dc6afd


### Result:
Thus the simple computer maintenance expert system was built successfully.
